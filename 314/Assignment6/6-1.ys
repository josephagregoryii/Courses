.pos 0
init:   irmovl Stack, %esp
        irmovl Stack, %ebp
        call Main
        halt

.pos 0x104
#Align 10 elements
        .align 10
array:  .long 0x0004
        .long 0x0001
        .long 0x0008
        .long 0x0002
        .long 0x0006
        .long 0x0005
        .long 0x0003
        .long 0x0007
        .long 0x0010
        .long 0x0009

Main:   pushl   %ebp
        rrmovl  %ebp, %esp

        irmovl  $10, %eax   #10 in eax
        irmovl  array, %edx # array in edx
        pushl   %eax
        pushl   %edx
        call    sort        #call sort with (array,10)
        popl    %edx
        popl    %eax

        rrmovl  %ebp, %esp
        popl    %ebp
        ret

sort:
        pushl   %ebp
        rrmovl  %esp, %ebp
        pushl   %ecx
        pushl   %esi
        pushl   %edi

        mrmovl  8(%ebp), %edx
        mrmovl  12(%ebp), %eax

.outerloop:
        pushl   %eax        #push elements in array
        rrmovl  %edx, %esi
        mrmovl  (%esi), %edi  #min = first element
        pushl   %esi

.innerloop:
        irmovl  4, %ecx
        addl    %ecx, %esi    #add 1 to stack pointer
        mrmovl  (%esi), %ecx  #pointer
        rrmovl  %edi, %ebx    #current min stored
        suble   %ecx, %edi    #check if num is smaller
        rrmovl  %ebx, %edi    #min
        jle     .notsmaller   #jump when ecx is smaller

        rrmovl  %ecx, %edi    #new min
        popl    %ecx
        pushl   %esi          #push new min

.notsmaller:
        irmovl  1, %ecx
        subl    %ecx, %eax    #get index
        jg      .innerloop

        pushl   %edx
        call    Swap
        popl    %edx
        popl    %esi

        popl    %eax
        irmovl  4, %ecx       #make edx head pointer by incrementing
        addl    %ecx, %edx    #move edx by one
        irmovl  1, %ecx       #get length of array
        subl    %ecx, %eax    #subtract to find smallest
        jg      .outerloop    #if ebx <1, end loop

        popl    %edi
        popl    %esi
        popl    %ecx
        rrmovl  %ebp, %esp
        popl    %ebp
        ret

Swap
        pushl   %ebp
        rrmovl  %esp, %ebp
        pushl   %ebx

        mrmovl  8(%ebp), %ecx
        mrmovl  12(%ebp), %edx
        mrmovl  (%edx), %eax
        mrmovl  (%ecx), %ebx
        rrmovl  %eax, (%ecx)
        rrmovl  %ebx, (%edx)

        popl    %ebx
        rrmovl  %ebp, %esp
        popl    %ebp
        ret

#The stack starts here and grows to lower addresses
        .pos 0x100
Stack:
